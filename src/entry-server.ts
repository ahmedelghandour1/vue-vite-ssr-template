/* eslint-disable @typescript-eslint/no-explicit-any */
import { basename } from "path";
import { renderToString } from "vue/server-renderer";
import { createApp } from "./app";
import devalue from "@nuxt/devalue";

export async function render(url: string, manifest: Record<string, Array<string>>) {
  const { app, router, pinia, initialStateForReset } = createApp();

  // receive all cookies from server and assign to the user store

  // set the router to the desired URL before rendering
  await router.push(url);
  await router.isReady();

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx: Record<string, any> = {};
  const html = await renderToString(app, ctx);

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const state = devalue(pinia.state.value);

  const teleports = ctx.teleports;
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest);

  return [html, preloadLinks, state, teleports, devalue(initialStateForReset)];
}

function renderPreloadLinks(modules: Array<any>, manifest: Record<string, Array<string>>) {
  let links = "";
  const seen = new Set();

  modules.forEach((id) => {
    const files: Array<any> = manifest[id];
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file);
          const filename = basename(file);
          if (manifest[filename]) {
            for (const depFile of manifest[filename]) {
              links += renderPreloadLink(depFile);
              seen.add(depFile);
            }
          }
          links += renderPreloadLink(file);
        }
      });
    }
  });

  return links;
}

function renderPreloadLink(file: string) {
  if (file.endsWith(".js")) {
    return `<link rel="modulepreload" crossorigin href="${file}">`;
  } else if (file.endsWith(".css")) {
    return `<link rel="stylesheet" href="${file}">`;
  } else if (file.endsWith(".woff")) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`;
  } else if (file.endsWith(".woff2")) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`;
  } else if (file.endsWith(".gif")) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif">`;
  } else if (file.endsWith(".jpg") || file.endsWith(".jpeg")) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`;
  } else if (file.endsWith(".png")) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png">`;
  } else {
    // TODO
    return "";
  }
}
